name: HERMES CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 4 * * *'
  workflow_dispatch:

jobs:
  test-backend:
    name: Backend CI (lint + tests)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with black (check only)
        run: |
          black --version
          black --check .

      - name: Run tests (skip E2E)
        env:
          # Provide minimal env to satisfy config where needed
          OPENAI_API_KEY: test-key
          DEBUG: 'true'
        run: |
          pytest -q -k "not e2e"

  deploy-frontend:
    name: Frontend CD (GitHub Pages)
    runs-on: ubuntu-latest
    needs: test-backend
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write  # required for gh-pages push
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json', 'frontend/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        working-directory: frontend
        run: |
          npm install

      - name: Build
        working-directory: frontend
        run: |
          npm run build

      - name: Add SPA fallback (404.html)
        run: |
          cp -f frontend/dist/index.html frontend/dist/404.html

      - name: Deploy to gh-pages branch
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_PAT }}
          publish_dir: ./frontend/dist
          publish_branch: gh-pages

  e2e-backend:
    name: Backend E2E (scheduled)
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    services:
      redis:
        image: redis:7
        ports:
          - 6379:6379
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for Postgres
        run: |
          for i in {1..30}; do
            if pg_isready -h 127.0.0.1 -p 5432 -U postgres; then
              echo "Postgres is ready"; break; fi; sleep 2; done

      - name: Run E2E test suite
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@127.0.0.1:5432/postgres
          REDIS_URL: redis://127.0.0.1:6379
          DEBUG: 'true'
        run: |
          pytest -q

# ---------------------------------------------
# Notes
# - test-backend: Lints with black and runs pytest on every push and PR to main.
# - deploy-frontend: Builds the marketing site and deploys to gh-pages, but only on push to main, and only after test-backend succeeds (needs).
# - The 'needs' keyword ensures deploy-frontend waits for test-backend to pass.
# - The 'if' condition restricts deploy-frontend to pushes on the main branch.
# - Repository settings required:
#   1) Pages source set to 'Deploy from a branch' -> branch 'gh-pages' (root).
#   2) Actions permissions allow workflows to create and approve pull requests (optional) and, importantly, 'Read and write permissions' for GITHUB_TOKEN so the workflow can push to gh-pages.
#   3) If using organization-level policies, ensure workflows can use third-party actions like 'peaceiris/actions-gh-pages'.
# ---------------------------------------------
