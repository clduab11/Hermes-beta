name: Comprehensive CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "20"

jobs:
  # Legal Tech Security & Compliance Validation
  security-audit:
    name: Security & Legal Compliance Audit
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-security-${{ hashFiles('requirements*.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install security dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml] safety semgrep trufflehog3 pip-audit

      - name: Run Bandit Security Analysis
        run: |
          bandit -r hermes -f json -o bandit-report.json
          bandit -r hermes -f txt

      - name: Python Dependency Vulnerability Scan
        run: |
          pip-audit --format=json --output=pip-audit.json
          pip-audit --format=table

      - name: Secret Detection with TruffleHog
        run: |
          trufflehog3 --format json --output trufflehog-report.json .
          if [ -s trufflehog-report.json ]; then
            echo "‚ö†Ô∏è Potential secrets detected! Review trufflehog-report.json"
            cat trufflehog-report.json
            exit 1
          fi

      - name: HIPAA/GDPR Compliance Check
        run: |
          echo "üîç Scanning for HIPAA/GDPR compliance patterns..."
          # Check for proper data encryption patterns
          grep -r "encrypt\|AES\|TLS" hermes/ || echo "‚ö†Ô∏è Limited encryption patterns found"
          # Check for audit logging
          grep -r "audit\|log" hermes/ || echo "‚ö†Ô∏è Limited audit logging found"
          # Check for data retention policies
          grep -r "retention\|expire\|delete" hermes/ || echo "‚ö†Ô∏è No data retention policies found"

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            pip-audit.json
            trufflehog-report.json
          retention-days: 30

  # Multi-version Python Testing
  python-tests:
    name: Python Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-ci.txt
          pip install coverage[toml] pytest-xvfb

      - name: Run comprehensive linting
        run: |
          echo "üîç Running Black formatter check..."
          black --check --diff .
          echo "üîç Running Flake8 linting..."
          flake8 hermes tests --max-line-length=88 --extend-ignore=E203,W503
          echo "üîç Running isort import sorting check..."
          pip install isort
          isort --check-only --diff .

      - name: Run comprehensive type checking
        run: |
          pip install mypy types-requests
          echo "üîç Running MyPy type checking..."
          mypy hermes --ignore-missing-imports --warn-return-any --warn-unused-configs

      - name: Run tests with coverage
        env:
          PYTHONPATH: .
          OPENAI_API_KEY: test-key-for-ci
          DEBUG: true
        run: |
          coverage run -m pytest -xvs --tb=short -k "not e2e"
          coverage report --show-missing
          coverage xml

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-python${{ matrix.python-version }}
          path: |
            coverage.xml
            .coverage
          retention-days: 30

  # Code Quality & Documentation
  code-quality:
    name: Code Quality & Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install quality tools
        run: |
          python -m pip install --upgrade pip
          pip install pylint radon vulture pydocstyle interrogate

      - name: Code complexity analysis
        run: |
          echo "üìä Analyzing code complexity..."
          radon cc hermes --min B
          radon mi hermes --min B

      - name: Dead code detection
        run: |
          echo "üîç Checking for dead code..."
          vulture hermes --min-confidence 80

      - name: Documentation coverage
        run: |
          echo "üìö Checking documentation coverage..."
          interrogate hermes --ignore-init-method --ignore-magic --verbose

      - name: Legal disclaimer verification
        run: |
          echo "‚öñÔ∏è Verifying legal disclaimers..."
          find . -name "*.py" -path "./hermes/*" | xargs grep -l "legal\|disclaimer\|attorney" || echo "‚ö†Ô∏è No legal disclaimers found in code"
          find . -name "*.md" -o -name "*.rst" | xargs grep -l "disclaimer\|liability\|warranty" || echo "‚ö†Ô∏è No legal disclaimers found in docs"
